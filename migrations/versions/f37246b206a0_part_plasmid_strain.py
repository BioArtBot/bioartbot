"""part_plasmid_strain

Revision ID: f37246b206a0
Revises: b8ebf60a501c
Create Date: 2022-01-31 22:20:33.462612

"""
from ast import Str
from alembic import op
import sqlalchemy as sa
from sqlalchemy.ext.declarative import declarative_base

from migrations.utils.session import session_scope

# revision identifiers, used by Alembic.
revision = 'f37246b206a0'
down_revision = 'b8ebf60a501c'
branch_labels = None
depends_on = None


Base = declarative_base()

color_name_dict = {'BBa_E1010': 'RFP',
              'BBa_K592009': 'amilCP',
              'BBa_K592011': 'cjBlue',
              'BBa_E2050': 'mOrange',
              'BBa_K1033916': 'amajLime'
}

class BacterialColorModel(Base):
    __tablename__ = 'bacterial_colors'

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(20), unique=True, nullable=False)
    biobrick_id = sa.Column(sa.String(30), nullable=False)
    strain_id = sa.Column(sa.Integer, sa.ForeignKey('strains.id'), nullable=False)
    strain = sa.orm.relationship("StrainModel",
                    primaryjoin="(BacterialColorModel.strain_id==StrainModel.id)")

strain_plasmid_association = sa.Table('strain_plasmid_association', Base.metadata,
    sa.Column('strain_id', sa.ForeignKey('strains.id'), primary_key=True),
    sa.Column('plasmid_id', sa.ForeignKey('plasmids.id'), primary_key=True)
)

class StrainModel(Base):
    __tablename__ = 'strains'

    id = sa.Column(sa.Integer, primary_key=True)
    global_id = sa.Column(sa.String(30), unique=True, nullable=False)
    name = sa.Column(sa.String(20), unique=True, nullable=False)
    friendly_name = sa.Column(sa.String(20), nullable=False)
    description = sa.Column(sa.String(500), nullable=False)
    background_strain = sa.Column(sa.String(30), nullable=False)
    application_id = sa.Column(sa.Integer, sa.ForeignKey('applications.id'))
    application = sa.orm.relationship('ApplicationModel')
    plasmids = sa.orm.relationship('PlasmidModel', 
                            secondary=strain_plasmid_association,
                            backref="in_strains")

class PlasmidModel(Base):
    __tablename__ = 'plasmids'

    id = sa.Column(sa.Integer, primary_key=True)
    global_id = sa.Column(sa.String(30), unique=True, nullable=False)
    name = sa.Column(sa.String(20), unique=True, nullable=False)
    friendly_name = sa.Column(sa.String(20), nullable=False)
    description = sa.Column(sa.String(500), nullable=False)
    sequence = sa.Column(sa.Text())
    sequence_of_interest = sa.Column(sa.Text())
    antibiotic_resistance = sa.Column(sa.String(25), nullable=False)
    application_id = sa.Column(sa.Integer, sa.ForeignKey('applications.id'))
    application = sa.orm.relationship('ApplicationModel')
    source = sa.Column(sa.String(50))

class ApplicationModel(Base):
    __tablename__ = 'applications'

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.String(30), nullable=False)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('applications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('genetic_parts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('global_id', sa.String(length=30), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('friendly_name', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('sequence', sa.Text(), nullable=False),
    sa.Column('part_type', sa.String(length=20), nullable=True),
    sa.Column('assembly_method', sa.String(length=50), nullable=False),
    sa.Column('cloning_prefix', sa.String(length=10), nullable=False),
    sa.Column('cloning_suffix', sa.String(length=10), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('global_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('plasmids',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('global_id', sa.String(length=30), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('friendly_name', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('sequence', sa.Text(), nullable=True),
    sa.Column('sequence_of_interest', sa.Text(), nullable=True),
    sa.Column('antibiotic_resistance', sa.String(length=25), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('global_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('strains',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('global_id', sa.String(length=30), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('friendly_name', sa.String(length=20), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('background_strain', sa.String(length=30), nullable=False),
    sa.Column('application_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['application_id'], ['applications.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('global_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('strain_plasmid_association',
    sa.Column('strain_id', sa.Integer(), nullable=False),
    sa.Column('plasmid_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['strain_id'], ['strains.id'], ),
    sa.ForeignKeyConstraint(['plasmid_id'], ['plasmids.id'], ),
    sa.PrimaryKeyConstraint('strain_id', 'plasmid_id')
    )
    op.create_table('plasmid_part_association',
    sa.Column('plasmid_id', sa.Integer(), nullable=False),
    sa.Column('part_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['plasmid_id'], ['plasmids.id'], ),
    sa.ForeignKeyConstraint(['part_id'], ['genetic_parts.id'], ),
    sa.PrimaryKeyConstraint('plasmid_id', 'part_id')
    )
    op.add_column('bacterial_colors', sa.Column('strain_id', sa.Integer()))
    op.create_foreign_key('bacterial_colors_strain_id_fkey',
                          'bacterial_colors',
                          'strains',
                          ['strain_id'],
                          ['id']
                         )

    with session_scope() as session:
        application = ApplicationModel(name='bioart')
        session.add(application)
        colors = session.query(BacterialColorModel).all()
        for color in colors:
            plasmid = PlasmidModel(
                global_id = color.biobrick_id,
                name = color_name_dict[color.biobrick_id],
                friendly_name = color.name,
                description = f"""Reporter plasmid that produces a {color.name} color.
                                  Constituitive promoter and chloramphenicol resistance.
                                  Distributed as part of ASM's 2016 agar art contest, so
                                  full sequence unknown, but coding sequence can be found
                                  in BioBricks registry.""",
                sequence = '',
                sequence_of_interest = '',
                antibiotic_resistance = "Chloramphenicol",
                application = application,
                source = "American Society For Microbiology"
            )
            session.add(plasmid)
            strain = StrainModel(
                global_id = f's_{color.biobrick_id}',
                name = f's_{color.biobrick_id}_Paris',
                friendly_name = color.name,
                description = f"""Reporter strain that produces a {color.name} color when grown.
                                  Transformed at CRI Paris from plasmids extracted at Counter
                                  Culture Labs, Oakland, from strains disseminated by ASM in
                                  2016 for their agar art contest.""",
                background_strain = u'DH5\u03B1',
                application = application,
                plasmids = [plasmid]
            )
            session.add(strain)
            color.strain = strain
        session.commit()
    
    op.alter_column('bacterial_colors', 'strain_id', nullable=False)
    op.drop_column('bacterial_colors', 'biobrick_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bacterial_colors', sa.Column('biobrick_id', sa.VARCHAR(length=30), autoincrement=False))
    op.drop_constraint('bacterial_colors_strain_id_fkey', 'bacterial_colors', type_='foreignkey')

    with session_scope() as session:
        colors = session.query(BacterialColorModel).all()
        for color in colors:
            color.biobrick_id = color.strain.plasmids[0].global_id
        session.commit()

    op.alter_column('bacterial_colors', 'biobrick_id', nullable=False)
    op.drop_column('bacterial_colors', 'strain_id')
    op.drop_table('plasmid_part_association')
    op.drop_table('strain_plasmid_association')
    op.drop_table('strains')
    op.drop_table('plasmids')
    op.drop_table('genetic_parts')
    op.drop_table('applications')
    # ### end Alembic commands ###
