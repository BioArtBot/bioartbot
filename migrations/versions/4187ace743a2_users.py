"""Users

Revision ID: 4187ace743a2
Revises: fca4d39d6f19
Create Date: 2019-11-15 11:32:49.103079

"""

# revision identifiers, used by Alembic.
revision = '4187ace743a2'
down_revision = 'fca4d39d6f19'
branch_labels = None
depends_on = None


from alembic import op
import sqlalchemy as sa
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql.expression import func
from migrations.utils.session import session_scope

Base = declarative_base()

class UserModel(Base):
    __tablename__ = 'users'

    id = sa.Column(sa.Integer, primary_key=True)
    email = sa.Column(sa.String(50), nullable=False, index=True, unique=True)
    created_at = sa.Column(sa.DateTime(), nullable=False)
    verified = sa.Column(sa.Boolean(), nullable=False)
    artpieces = sa.orm.relationship('ArtpieceModel', backref='user')

class ArtpieceModel(Base):
    __tablename__ = 'artpieces'

    id = sa.Column(sa.Integer, primary_key=True)
    email = sa.Column(sa.String(50), nullable=False)
    user_id = sa.Column(sa.Integer, sa.ForeignKey('users.id'), nullable=True, index=False)
    submit_date = sa.Column(sa.DateTime(), nullable=False)


def upgrade():
    # create the users table and the artpieces.user_id column
    UserModel.__table__.create(op.get_bind())
    op.add_column(
            'artpieces'
            , sa.Column('user_id', sa.Integer, sa.ForeignKey('users.id'), nullable=True)
            )

    # create users from unique email addresses
    with session_scope() as session:
        artpieces_with_unique_email = (session.query(
            ArtpieceModel.email, func.min(ArtpieceModel.submit_date).label('submit_date'))
            .group_by(ArtpieceModel.email)
            )
        users = { artpiece.email: UserModel(
                    email=artpiece.email, created_at=artpiece.submit_date, verified=True)
                    for artpiece in artpieces_with_unique_email
                }
        session.add_all(users.values())

        # set artpiece user(/creator) based on email address
        for artpiece in session.query(ArtpieceModel):
            artpiece.user = users[artpiece.email]

    op.alter_column('artpieces', 'user_id', nullable=False)
    # don't need email now that user relationship is set up
    op.drop_column('artpieces', 'email')


def downgrade():
    op.add_column('artpieces', sa.Column('email', sa.String(50), nullable=True))

    # populate artpiece's email using user_id
    with session_scope() as session:
        users = {user.id: user.email for user in session.query(UserModel).all()}
        artpieces = session.query(ArtpieceModel).all()
        for artpiece in artpieces:
            artpiece.email = users[artpiece.user_id]

    op.alter_column('artpieces', 'email', nullable=False)
    op.drop_column('artpieces', 'user_id')

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
