"""add super_user table

Revision ID: ba196fd05ecc
Revises: 87524a43f720
Create Date: 2021-07-17 01:59:59.870762

"""
from alembic import op
import sqlalchemy as sa
import os
from enum import Enum
from datetime import datetime
from argon2 import PasswordHasher

from sqlalchemy.ext.declarative import declarative_base
from migrations.utils.session import session_scope

INITIAL_ADMIN_PASSWORD = os.environ.get('INITIAL_ADMIN_PASSWORD')

Base = declarative_base()

class OrderedEnum(Enum):
    @classmethod
    def _order(cls):
        return {item:num for num, item in enumerate(list(cls))}

    @property
    def _val_position(self):
        return self._order()[self]

    def __ge__(self, other):
        if self.__class__ is other.__class__:
            return self._val_position >= other._val_position
        return NotImplemented
    def __gt__(self, other):
        if self.__class__ is other.__class__:
            return self._val_position > other._val_position
        return NotImplemented
    def __le__(self, other):
        if self.__class__ is other.__class__:
            return self._val_position <= other._val_position
        return NotImplemented
    def __lt__(self, other):
        if self.__class__ is other.__class__:
            return self._val_position < other._val_position
        return NotImplemented


class UserRole(Enum):
    artist = 'Artist'
    printer = 'Printer'
    admin = 'Admin'

class UserModel(Base):
    __tablename__ = 'users'

    id = sa.Column(sa.Integer, primary_key=True)
    email = sa.Column(sa.String(50), nullable=False, index=True, unique=True)
    created_at = sa.Column(sa.DateTime(), nullable=False)
    role = sa.Column(
            sa.Enum(UserRole, values_callable=lambda x: [e.value for e in x])
            , nullable=False, name='role', default='Artist')
    password_hash = sa.Column(sa.String(128), nullable=True)

    def __repr__(self):
        return '<%r: %r>' % (self.id, self.email)

class SuperUserRole(OrderedEnum):
    printer = 'Printer'
    admin = 'Admin'

class SuperUserModel(Base):
    __tablename__ = 'super_users'

    id = sa.Column(sa.Integer, primary_key=True)
    email = sa.Column(sa.String(50), nullable=False, index=True, unique=True)
    created_at = sa.Column(sa.DateTime(), nullable=False)
    role = sa.Column(
            sa.Enum(SuperUserRole, values_callable=lambda x: [e.value for e in x])
            , nullable=False, name='role', default='Printer')
    password_hash = sa.Column(sa.String(128), nullable=True)

    def __repr__(self):
        return '<%r: %r>' % (self.id, self.email)

# revision identifiers, used by Alembic.
revision = 'ba196fd05ecc'
down_revision = '87524a43f720'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('super_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('role', sa.Enum('Printer', 'Admin', name='superuserrole'), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_super_users_email'), 'super_users', ['email'], unique=True)

    with session_scope() as session:
        users_to_copy = session.query(UserModel).filter(UserModel.role > UserRole.artist)
        super_users = list()
        for user in users_to_copy:
            super_users.append(SuperUserModel(email=user.email,
                                              created_at=user.created_at,
                                              role=user.role.value,
                                              password_hash=user.password_hash)
                              )
            user.role = UserRole.artist
            user.password_hash = ''
        session.add_all(super_users)

        admin_users = session.query(SuperUserModel).filter(SuperUserModel.role == SuperUserRole.admin)
        if admin_users.count() == 0:
            if not INITIAL_ADMIN_PASSWORD:
                raise AttributeError(("No existing admin accounts detected. You must set "
                                      "the environment variable INITIAL_ADMIN_PASSWORD "
                                      "as a starting point for managing users"))
            ph = PasswordHasher()
            session.add(SuperUserModel(email='ADMIN',
                                       created_at=datetime.now(),
                                       role=SuperUserRole.admin,
                                       password_hash=ph.hash(INITIAL_ADMIN_PASSWORD)))
        session.commit()

    #Resetting our ENUM type userrole. May not be compatible outside of Postgres
    op.execute(("CREATE TYPE userrole_temp AS ENUM ('Artist');"
                "ALTER TABLE users "
                    "ALTER COLUMN role TYPE userrole_temp "
                    "USING (role::text::userrole_temp);"
                "DROP TYPE userrole;"
                "ALTER TYPE userrole_temp RENAME TO userrole;"
                ))
    # ### end Alembic commands ###


def downgrade():
    op.execute(("ALTER TYPE userrole ADD VALUE 'Printer';"
                "ALTER TYPE userrole ADD VALUE 'Admin';"
                "COMMIT;"))

    with session_scope() as session:
        super_users = session.query(SuperUserModel).all()
        for user in super_users:
            basic_user = session.query(UserModel).filter(UserModel.email == user.email).all()
            if len(basic_user) != 0:
                basic_user[0].role = user.role.value
                basic_user[0].password_hash = user.password_hash
        session.commit()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_super_users_email'), table_name='super_users')
    op.drop_table('super_users')
    op.execute("DROP TYPE superuserrole;")
    # ### end Alembic commands ###
