"""user roles

Revision ID: d1d869f0483f
Revises: fa69796da9ea
Create Date: 2020-11-17 03:20:42.147728

"""
from alembic import op
import sqlalchemy as sa
import os
from enum import Enum
from sqlalchemy.ext.declarative import declarative_base
from migrations.utils.session import session_scope

Base = declarative_base()


# revision identifiers, used by Alembic.
revision = 'd1d869f0483f'
down_revision = 'fa69796da9ea'
branch_labels = None
depends_on = None

class UserRole(Enum):
    artist = 'Artist'
    printer = 'Printer'
    admin = 'Admin'

class UserModel(Base):
    __tablename__ = 'users'

    id = sa.Column(sa.Integer, primary_key=True)
    role = sa.Column(
            sa.Enum(UserRole, values_callable=lambda x: [e.value for e in x])
            , nullable=False, name='role')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('emailfailures', 'artpiece_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###

    #Add enum type explicitly
    userrole = sa.Enum(UserRole, values_callable=lambda enum: [e.value for e in enum])
    with session_scope() as session:
        userrole.create(op.get_bind())
        
    op.add_column('users', sa.Column('role', userrole, nullable=True))
    with session_scope() as session:
        users = session.query(UserModel).all()
        for user in users:
            user.role = 'Artist'
    op.alter_column('users', 'role', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'role')
    op.alter_column('emailfailures', 'artpiece_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    # ### end Alembic commands ###
    userrole = sa.Enum(UserRole, values_callable=lambda enum: [e.value for e in enum])
    with session_scope() as session:
        userrole.drop(op.get_bind())
